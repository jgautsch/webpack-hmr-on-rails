// Run the Webpack Dev Server that uses this config like this:
// cd client && node server.js

var path = require('path');
var config = require('./webpack.common.config');
var webpack = require('webpack');
var _ = require('lodash');

// Add more entries to the one specified in webpack.common.config.js
_.forEach(config.entry, function(values, key) {
  values.unshift(
    'webpack-dev-server/client?http://localhost:8080',
    'webpack/hot/dev-server'
  );
});

// 'output' specifies the filepath for saving the bundle output
// generated by webpack
// It is an object with options, and you can interpolate the name
// of the entry file using '[name]' in the filename, which will correspond
// to the name of the entrypoint (i.e. like 'main').
// Any bundled filenames should be added to '.gitignore'.
config.output = {
  // this file is served directly by webpack dev server, because this
  // webpack config file is used in the webpack dev server (with hot reloading)
  filename: '[name]_webpack_bundle.js',
  path: path.join(__dirname, '../app/assets/javascripts/generated'),
  publicPath: 'http://localhost:8080/javascripts/generated'
};

// definePlugin takes in raw strings and inserts them, so you can put strings
// of JS if you want.
// What we're doing here is basically creating a global __DEV__ that we can
// use in our code like we do with Rails.env.development?
var globalsPlugin = new webpack.DefinePlugin({
  __DEV__: JSON.stringify(JSON.parse(process.env.BUILD_DEV || 'true'))
});

// 'plugins' is where you add any additional plugins to the compiler
config.plugins = [
  new webpack.HotModuleReplacementPlugin(),
  globalsPlugin
];

// 'devtool' specifies a developer tool to enhance debugging.
// This is where you specify how source-mapping should work, for example.
// More info at: http://webpack.github.io/docs/configuration.html#devtool
//
// Basically though:
// 'eval-source-map'  => better in-browser debugging with source maps
// 'eval'             => allows you to use hot-reloading
//
// config.devtool = 'eval-source-map';
config.devtool = 'eval';

// These loaders tell webpack how to load, or what to use to load, files
// based on their extension.
config.module.loaders.push(
  // TODO: Turn these back on for react
  { test: /\.jsx?$/, loaders: ['babel-loader'], exclude: /node_modules/ },
  { test: /\.js$/, loaders: ['babel-loader'], exclude: /node_modules/ }
);

module.exports = config;
